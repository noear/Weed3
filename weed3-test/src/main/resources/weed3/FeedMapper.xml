<?xml version="1.0" encoding="utf-8" ?>

<mapper namespace="zm.data.code.estuaryapi.dso.db.mapper" :db="db_estuary">

    <!-- feed -->

    <!-- post -->

    <sql id="post_get_by_post_id" :return="zm.data.code.estuaryapi.models.estuary.PostModel" :caching="cache_estuary" :cacheTag="post_${post_id}" :note="根据id获取文章">
        SELECT * FROM `post` WHERE `post_id` = @{post_id:long} LIMIT 1
    </sql>

    <sql id="post_get_list_by_post_id" :return="List[zm.data.code.estuaryapi.models.estuary.PostModel]" :caching="cache_estuary" :note="根据id获取文章列表">
        SELECT * FROM `post` WHERE `post_id` IN (@{post_ids:Iterable[Long]})
    </sql>

    <!-- post_info -->

    <sql id="post_info_get_by_post_id" :return="zm.data.code.estuaryapi.models.estuary.PostInfoModel" :caching="cache_estuary" :cacheTag="post_info_${post_id}" :note="根据id获取文章额外信息">
        SELECT * FROM `post_info` WHERE `post_id` = @{post_id:long} LIMIT 1
    </sql>

    <!-- post_report -->

    <sql id="post_report_add" :return="long" :cacheClear="post_report_user_id_${user_id}" :note="新增文章投诉">
        INSERT INTO `post_report` (`row_id`, `user_id`, `post_id`, `reason`, `create_date`, `create_fulltime`, `update_date`, `update_fulltime`)
                           VALUES (@{row_id:long}, @{user_id:long}, @{post_id:long}, @{reason:String}, @{create_date:int}, @{create_fulltime:Date}, @{update_date:int}, @{update_fulltime:Date})
    </sql>

    <!-- relate_user_post -->

    <sql id="relate_user_post_add" :return="long" :cacheClear="relate_user_post_user_id_${user_id}" :note="新增用户文章关系">
        INSERT INTO `relate_user_post` (`relate_id`, `user_id`, `post_id`, `type`, `create_date`, `create_fulltime`, `update_date`, `update_fulltime`)
                                VALUES (@{relate_id:long}, @{user_id:long}, @{post_id:long}, @{type:int}, @{create_date:int}, @{create_fulltime:Date}, @{update_date:int}, @{update_fulltime:Date})
    </sql>

    <sql id="relate_user_post_delete_by_user_id_post_id_type" :cacheClear="relate_user_post_user_id_${user_id}" :note="删除用户文章关系">
        DELETE FROM `relate_user_post` WHERE `user_id` = @{user_id:long} AND `post_id` = @{post_id:long} AND `type` = @{type:int}
    </sql>

    <sql id="relate_user_post_delete_by_user_id_type" :cacheClear="relate_user_post_user_id_${user_id}" :note="删除用户文章关系">
        DELETE FROM `relate_user_post` WHERE `user_id` = @{user_id:long} AND `type` = @{type:int}
    </sql>

    <sql id="relate_user_post_get_by_user_id_post_id_type" :return="zm.data.code.estuaryapi.models.estuary.RelateUserPostModel" :caching="cache_estuary" :cacheTag="relate_user_post_user_id_${user_id}" :note="获取用户文章关系">
        SELECT * FROM `relate_user_post` WHERE `user_id` = @{user_id:long} AND `post_id` = @{post_id:long} AND `type` = @{type:int} LIMIT 1
    </sql>

    <sql id="relate_user_post_get_list_by_user_id_type" :return="List[zm.data.code.estuaryapi.models.estuary.RelateUserPostModel]" :caching="cache_estuary" :cacheTag="relate_user_post_user_id_${user_id}" :note="获取用户文章关系">
        SELECT * FROM `relate_user_post` WHERE
        <if test="relate_id > 0">
            <![CDATA[
            `relate_id` < @{relate_id:long} AND
            ]]>
        </if>
        `user_id` = @{user_id:long} AND `type` = @{type:int} ORDER BY `relate_id` DESC LIMIT @{rows:int}
    </sql>

</mapper>
